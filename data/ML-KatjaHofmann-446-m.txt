


































                  
                  
                  
                  
                 

Experimental and causal view on information integration in autonomous agents

Philipp GeigerMax Planck Institute for Intelligent Systems, Tubingen, Germany; email: philipp.geiger@tuebingen.mpg.de Katja HofmannMicrosoft Research Cambridge, Cambridge, United Kingdom; email: katja.hofmann@microsoft.com Bernhard Scholkopf Max Planck Institute for Intelligent Systems, Tubingen, Germany; email: bs@tuebingen.mpg.de 

ecai


The amount of digitally available but heterogeneous information about the world is remarkable, and new technologies such as self-driving cars, smart homes, or the internet of things may further increase it.
In this paper we examine certain aspects of the problem of how such heterogeneous information can be harnessed by autonomous agents.
After discussing potentials and limitations of some existing approaches, we investigate how experiments can help to obtain a better understanding of the problem.
Specifically, we present a simple agent that integrates video data from a different agent, and implement and evaluate a version of it on the novel experimentation platform Malmo.
The focus of a second investigation is on how information about the hardware of different agents, the agents' sensory data, and causal information can be utilized for knowledge transfer between agents and subsequently more data-efficient decision making.
Finally, we discuss potential future steps w.r.t. theory and experimentation, and formulate open questions.




Introduction


Increasing amounts of heterogeneous information are recorded and connected, and this trend is likely to continue in the light of new technology such as self-driving cars, smart homes with domestic robots, or the internet of things.
Intuitively, it makes sense to design autonomous agents in a way that they automatically integrate all relevant and well-structured information on their environment that is available.
Various aspects of the problem of designing such agents have been investigated previously.
In this paper we approach the problem from two directions which, to our knowledge, have not been (exhaustively) examined yet: 
using sophisticated simulated experiments, on a practical level, and causal models, on a more theoretical level.
The complexity of the problem allows us only to take small steps.


 




















Main contributions




The main contribution of this paper consists of two investigations: 

In Section  we use a simulated experimentation platform Malmo to obtain a better understanding of the problem of integrating heterogeneous information. 
More specifically, we present a simple agent that harnesses video data from a different agent, and implement and evaluate a version of it. 



In Section  we investigate how detailed information on the hardware of different agents (we consider self-driving cars as example), their sensory data, and physical or causal information can be utilized for knowledge transfer between them and subsequent more data-efficient decision making.


The common structure of both investigations is that we start with a description of a scenario that captures certain core aspects of the general problem, in particular containing a variety of heterogeneous information sources, and then sketch a method to perform information integration and subsequent decision making in these scenarios.
After experimentally evaluating the method, or illustrating it based on a toy example, we conclude both investigations with a discussion of the advantages and limitations of the respective methods.



A reoccurring theme in our investigations is that we try to treat as much information (including models) as possible explicitly as input to algorithms instead of implicitly encoding it into algorithms.
Our hope is that this sheds a better, more explicit light on the problem.





Structure of the paper

The paper is structured as follows:

We introduce the experimentation platform and basic concepts in Section .
In Section , we formulate the problem.
In Section , investigate potentials and limitations of existing approaches for the problem.
In Sections  and , we present our two main investigations.
In Section , we discuss future directions and pose open questions.
We conclude with Section .
















Preliminaries

Here we introduce the concepts, models and the experimentation platform we will use in the paper.

Autonomous agents.


By an (autonomous) agent we mean a mechanism which, at each time point , takes some input from the environment, in particular its sensory data which we refer to as observation, and outputs some action that influences the environment. 
Moreover, by an intelligent (autonomous) agent we mean an autonomous agent which is successful in using its inputs and outputs for given tasks, i.e., specific goals w.r.t. the environment, often encoded by a reward or utility function.

Note that in this paper we do not define a clear boundary between agent and environment. 
Usually, we consider the hardware platform of an agent (e.g., the car) as part of the agent. 
This particularly has to be kept in mind when we talk of several agents in the "same environment": the hardware of the agents may still differ.
(It is almost a philosophical problem to define what precisely the "same environment" means. Here we simply suggest to interpret this notion as if it were used in an everyday conversation.
We pose a related question in Section .)


When we consider some agent  w.r.t. which some task is given and for which we want to infer good actions, while information may come from (sensory data of) a collection  of other agents, then we refer to  as target agent and the agents in  as source agents.



Experimentation platform "Malmo".

For the experiments in Section  we will use the software Malmo, a simulated environment for experimentation with intelligent agents, that was introduced recently.

Malmo is based on "Minecraft", which is an open-ended computer game where players can explore, construct, collaborate, and invent their own "games within the game" or tasks. The Malmo platform provides an abstraction layer on top of the game through which one or more agents observe the current state of the world (observations are customizable) and interact with it through their specific action sets (or actuators). 
The advantage of Malmo is that it reflects important characteristics of the problem instances we will introduce in Section .
To illustrate the platform, three sample observations of an agent in three different maps in Malmo will be depicted in Figure .















Causal models.
Mathematically, a causal model  over a set  of variables consists of a directed acyclic graph (DAG)  with  as node set, called causal diagram or causal DAG, and a conditional probability density  (for all  in the domain of ) for each , where  are the parents of  in . 
Given a causal model  and a tuple of variables  of , the post-interventional causal model  is defined as follows:
 drop the variables in  and all incoming arrows from the causal diagram, and fix the value of variables in  to the corresponding entry of  in all remaining conditional densities.
Based on this, we define the post-interventional density of  after setting  to , denoted by  or , by the the density of  in . 

On a non-mathematical level, we consider  to be a correct causal model of some part of reality, if it correctly predicts the outcomes of interventions in that part of reality (clearly there are other reasonable definitions of causation).
Keep in mind that in this paper, in particular Section , will use causal models and causal reasoning in a more intuitive and sometimes less rigorous way, to not be limited by the expressive power of the current formal modeling language.

Note that we will use expressions like  as shorthand for .



















[Problem formulation]Problem formulation












Let us describe the problem we consider in this paper in more detail:

Given: a task  w.r.t. some partially unknown environment , and additional heterogeneous but well-structured information sources  (e.g., in the form of low-level sensory data, or in the form of high-level descriptions). 
Goal: design an agent 


 that automatically harnesses as much relevant information of  as possible to solve ; more specifically, it should use  to either improve an explicit model of the effects
(In this sense, at least the target of the information integration is clear: modeling the dynamics or causal structure of the agent in the environment.)
of its actions, which then guides its actions, or let its actions directly be guided by .
Note that alternatively, one could also formulate the problem by letting  only be an actuator, and not a complete agent, and include the agent's sensors into . This might be a more precise formulation, however, for the sake of an intuitive terminology, we stick to the definition based on  being an agent.
(Note that the problem we formulate here does not coincide with developing ("strong") artificial intelligence (AI), as defined, e.g., by the Turing test or simply based on human-level intelligence.
We restrict to sources of information that are more or less well-structured - either quantitative measurements with a simple and clear relation to the physical world, or information in a language much more restrictive than natural language.

Nonetheless, the formulated problem can be seen as one step from say RL into the direction of AI.
)



















































To illustrate the general problem, in what follows, we give three concrete examples of desirable scenarios in which agents automatically integrate heterogeneous information.


Ideally, agents would be able to simultaneously integrate information sources from all three examples. 












[Example 1]Example 1: sharing information between different self-driving cars

Consider self-driving cars.
It is desirable that as much information about the environment can be shared amongst them.
By such information we mean up-to-date detailed street maps, traffic information, information on how to avoid accidents etc.
For instance, assume that one self-driving car leaves the road at some difficult spot due to some inappropriate action, since, for instance, the spot has not been visited by self-driving cars before (or newly appeared due to say some oil spill or rockfall).
If we only consider other self-driving cars of the same hardware, this experience could directly be transferred to them by enforcing them not to perform the very action at the very spot.
(I.e., for all cars of the same hardware one could treat the experience as if it was their own and make them "learn" from it in the usual reinforcement learning (RL) way.)
However, if we assume that there are self-driving cars of different types, then it is not possible to transfer the experience, and thus avoid further accidents, in this straight-forward way.









[Example 2]Example 2: observing another agent


Consider domestic robots.
A domestic robot may, with its sensor, observe humans how they handle doors, windows, light switches, or kitchen devices.
It should be possible that domestic robots learn from such experience.
For instance, one could imagine a robot to reason that, if it is able to operate the door knob in a similar way as a human did before, this would also open the door and and thus allow the robot to walk into the other room (to achieve some task).


















[Example 3]Example 3: integrating high-level information

Consider an agent that arrives in a city it has never been to before.
The goal is to get to a certain destination, say to the town hall.
A resident may be able to explain the way in a simple language, with words such as "... follow this street until you come to a church, then turn right ...".
Or a resident could provide a map and mark directions on the map. 
One could imagine that an autonomous agent could combine such a description with a model of the "local" (or "low-level") dynamics that is shared by most environments (which is closely related to the laws of physics). 
The model of the "local" dynamics could have been either hard-coded, or inferred based on exploration in other (related) environments.
In principle it should be possible that such a combination allows the agent to successfully navigate to the destination city hall.


































Related work: potentials and limitations

Various research directions exist that address major or minor aspects of the problem formulated in Section .
Here we discuss the most relevant such directions we are aware of, highlighting their potentials and limitations w.r.t. the problem.
Keep in mind that Sections  and  contain additional discussions on the advantages of our approaches over these directions.




Reinforcement learning


One of the most powerful approaches to shaping intelligent autonomous agents is reinforcement learning (RL).
Instead of explicitly hard-coding each detail of an agent, for each environment and objective individually, the idea is to take an approach which is more modular and based on learning instead of hard-coding: the supervisor only determines the reward function and then the agent ideally uses exploration of the unknown environment and exploitation of the gained experience (sensory data) to achieve a high cumulative reward.



















Regarding the problem we consider in this paper, RL plays a key role for integration of information in the form of recordings of an agent's own past, or of an agent with the same hardware.
However, as mentioned in Section , in contrast to RL, here we consider the problem of integrating information beyond such recordings, such as sensory data from agents with different hardware, or higher level information such as maps.







Learning from demonstrations


According to, in learning from demonstrations (LfD), some "teacher" performs a trajectory which is recorded, and the goal is that a "learner" agent, based on this recording, infers and imitates (or utilizes) the teacher's "policy" (or the dynamics of the environment, or both).
Central notions that uses to analyze and distinguish various types of LfD problems are the record mapping, i.e., what aspects of the teacher's demonstration are measured and recorded, and the embodiment mapping, i.e., if the recorded actions can directly be implemented by the "learner" and lead to similar observations as the recoded ones, or if the recordings first have to be transformed "to make sense" for the learner. 



Our problem formulation can be seen as a generalization of LfD. 
Based on this, while a significant part of the problem we consider can be addressed by LfD methods, others are beyond the scope of these methods:
Instead of hand-crafting, e.g., the embodiment mapping for each agent individually, we aim at (semi-)automating the inference of the mapping from recordings of "source" agents to actions of a "target" agent.
In particular, we propose to do such a (semi-)automation based on additional information sources on the hardware specifications of the agents involved (Section ).


(Note that there is some work on learning from observations only (not actions) of a "teacher". However, this approach does not allow to integrate information such as the map in . Note that a difference to our method in Section  is that, e.g., an estimate of the complete transition probability is necessary, while our method only requires an idea of the "low-level" dynamics.) 

Generally, we aim at integrating information from many different sources simultaneously (e.g., many other self-driving cars in  and many different forms of information as described in  through .
In particular, we aim at learning from databases that contain desirable as well as undesirable trajectories (e.g., avoid similar accidents as in ).







Clearly, we do not present methodology that fully tackles the above shortcomings of LfD methods in this paper. Rather, we make first steps towards such methodology in Sections  and .





















Multi-agent systems

In multi-agent systems, collections of agents acting in a shared environment are studied.
One important task is collaboration between agents.
A common approach is to model the collection of agents again as a single agent, by considering tuples of actions and observations as single actions and observations.
Learning-based methods have been extensively studied.

While multi-agent systems approaches often allow to share and transfer information between agents, regarding the problem we formulated in Section  they have certain limitations:
Similar as LfD, they usually do not integrate higher-level information sources (as the map in ) or explicit hardware specifications of the agents (which we do in Section ).
Furthermore, if the mapping from some source agents sensory data to a target agents action is learned via modeling all agents as a single one, then it seems difficult to add agents to an environment, while our preliminary investigation in Section  in principle allows for adding agents more easily.
Also note that the task of collaboration between agents is rather external to the problem we consider.


































Transfer learning for agents

The problem we consider is related to transfer learning for agents.
For instance, consider an example where, in the well-known mountain car example, experience should be transferred although the motor of the car is changed.
This comes close to transferring experience between self-driving cars as we suggest in .
However, the scope of methods reviewed in is on transferring observation-action recordings or things such as policies, value functions etc. using an appropriate mapping, while the goal we pursue is to also integrate information which is usually not expressible in these terms (e.g., the map or natural language description in , or the observation of another agent in ).
Furthermore, in this paper we aim at integrating many heterogeneous sources of  information, while in transfer learning, even though several sources of information may be considered, they are usually homogeneous.








Further related areas

Other related directions include the following.
Recently, the experimentation with intelligent agents in platforms based on computer games has become popular.
To our knowledge, the current work is the first one to use such platforms to study the problem of information integration, or related problems such as LfD (Section ).

The general integration and transfer of data (not focused on intelligent agents) using causal models has been studied by.
The idea of integrating higher-level information (again not for intelligent agents though) has been studied, e.g., by.
The relation between intelligent agents and causal models has been studied from a more philosophical perspective, e.g., by.

Another related areas is computerized knowledge representation.
Compared to general approaches to knowledge representation, our focus is on knowledge about the physical world.

Another relevant area is integration of human knowledge.


































































































Investigation 1: integration of "non-subjective" information, evaluated in a simulated environment


In this section we aim to shed light on the following aspects of the problem formulated in Section :

Generally, what experiments, in particular in simulated environments, can be performed to better understand the problem?
How can experimentation (exploration) help an agent to translate "non-subjective" experience not recorded by itself into its own "coordinate system" and use it for (successful) decision making?
How can partial information on the dynamics, such as a controller that is known to work locally, be merged with "higher-level" information such as hints on the path to some goal position?
How can we quantify the efficiency gain from additional information sources?

The investigation is structured as follows: 
in Section  we describe the scenario, in particular the available heterogeneous information sources,
in Section  we sketch an information-integrating agent for that scenario,
then, in Section , we evaluate an adapted version of the agent in a simulated environment, 
and last, in Section  we discuss the advantages of our method over those that do not use additional information, and some further aspects.









Scenario

Task.

An agent  starts in some unknown landscape and the task is to get to some visually recognizable goal position as quickly as possible.







Available heterogeneous information.

We assume the following information sources to be available:

the agent's own sensory input in the form of images  and position signal  (which can be seen an "interactive information" source since the agent can "query" this source via its actions), 
the controller , which can be seen as a summary of the agent 's past subjective experience regarding the invariant local "physical laws" of a class of environments
(Specifically, we assume that if the distance between position  and  is small, then  successfully steers from  to .
Alternatively,  could be a local model of the dynamics which induces such a controller.),
a video trajectory  that is a first-person recording of another agent with similar (but not necessarily identical) hardware that runs to the goal in the same environment. 






Relation to the problem formulated in Section .
On the one hand, this scenario can be seen as a (very) simplistic version of the scenario described in :
 is a self-driving car that is supposed to get to some marked goal in an unknown environment, and the video  comes from other cars that have a similar video-recording device but  different hardware (engine etc.).

On the other hand, this scenario can be seen as a simplistic version of the scenario described in :
the unknown landscape is some unknown city  arrived in, and instead of a description of the way to the destination in simple natural language, it gets a sequence of photos that describe the path it has to take.






Method



[tb]
   Agent that integrates first-person video of other agent
   [1]
   input: Controller , video .

   i = 1, , L    Use local controller , optimization method  and interaction with the environment to search locally around the current position for the next .
   Use  to go to .
      









First we sketch a general method, i.e., "software" for , in Algorithm , assuming a (stochastic) optimization method  and an image distance  as given (for concrete examples, see below).
Note that in Algorithm  we denote by  the mean image  observed at position .
The basic idea is that the agent uses local experimentation, based on prior knowledge of the local dynamics, to map the video  into information (and eventually actions) that directly describes its own situation.


Although Algorithm  is in principle applicable to the experimental setup we consider in Section  below, we will evaluate Algorithm  instead, which is a simplified proof-of-concept implementation of it, making use of "teleportation", allowing the agent to directly jump to other positions without needing to navigate there.

For Algorithm , as optimization method , we use simple grid search.
(Note that instead one could use gradient descent or Bayesian optimization techniques.)
Furthermore, we define the image distance  using Gaussian blur as follows:


, where  is the normalization of  (i.e., subtraction by mean and division by standard deviation over the single pixels),  is a bivariate Gaussian with hand-tuned variance and  is the convolution in both image dimensions.





[tb]
   Proof-of-concept of Algorithm  for Malmo
   [1]
   input: Controller , video .
   set  current position, once the mission starts
   i = 1, , L     use ,  and teleportation to locally search around position  for the next 
      restart the mission
   set .
       use  to steer to  
   current position is close to 
   set 
         

































































Empirical evaluation in a simulated environment





























































*[t]
.3
      Mission 1
  
.3
      Mission 2
  
.3
      Mission 3
  
First frames of the respective missions, for illustration purposes.










.33
      Mission 1
  
.33
      Mission 2
  
.33
      Mission 3
  
The "ground truth" position trajectory of the demonstrator  (blue dashed line), and the position trajectory of Algorithm  , (red solid line) from top view (x- and y-axis correspond to x- and y-coordinate in the map. While Algorithm  fails in Mission 2 due to the repetitive structure of some wall, it succeeds in Missions 2 and 3 in spite of its simplicity.






For each mission (row) a short description (column 2), and the outcome of Algorithm  applied to it (columns three and four).

lXll
Mission & Description and image &  &  versus  



1 & Figure . Two passages have to be passed. & success & Figure  

2 & Figure . With (mortal) lava next to the path. & fail & Figure  

3 & Figure . With spider webs that occlude vision and lead to slow motion. & success & Figure 






To evaluate Algorithm , we consider three simple "Parkours" missions in the experimentation platform Malmo, described in Section . 








These missions consist of simple maps that have a special, visually recognizable, position which is defined as goal.
A short description of the three missions is given in column two of Table .
We generally restrict the possible actions to , where the first dimension is moving forth and back, and the second is strafing (moving sideways).
The task is to get to the goal position within 15 seconds in these maps. 

For each mission, we record one trajectory performed by a human demonstrator, which solves the task. 
More specifically, we record positions, which we denote by , and observations (video frames), denoted by . 

We run Algorithm  with inputs  and a simple proportional controller (for ), where we tuned the proportional constant manually in previous experiments (but without providing  or the actions the human demonstrator took).
Let  denote the trajectory of positions that Algorithm  subsequently takes in the map. 
Furthermore, let  denote whether the position tracking while-loop of Algorithm  (line  and following) gets to the goal within 15 seconds.
(This is a significantly weaker evaluation metric than considering the runtime of the complete Algorithm  of course.)









The outcome of the experiment is given in columns three and four of Table  and Figure .























Discussion 


























Discussion of the experiment


Outcome.

As shown by Table  and Figure , Algorithm  is successful for Missions 1 and 3. It fails in Mission 2 due to the repetitive structure of a wall that fills the complete image that is observed at some point during .
This wall makes the mapping from position to observation (video frame) (locally) non-injective which makes the algorithm fail. 
Note that this problem could quite easily be overcome by using prior assumptions on the smoothness of  together with considering more than one minimum of  as the potential true position (using, e.g., Bayesian optimization) or by searching for position sequences longer than 1 that match .



Limitation of the experiment.
A clear limitation of the experiment is that the human demonstrator that produced  used the same (simulated) "hardware" as Algorithm , while the overall goal of this paper is to integrate heterogeneous information.
However, we hope that this experiment can form the basis for more sophisticated ones in the future.










Theoretical analysis and insight



Efficiency gain from harnessing .

Assuming there are at most  positions which the demonstrator can reach within one time step, Algorithm  takes only about  steps to get to the goal.
Note that this theoretical analysis is supported by the empirical evaluation: Algorithm 's trajectories - visualized in Figure  - are roughly as long as  (note that the visualization does not show the local search of length ).

This has to be contrasted with an agent that does not integrate the information , and therefore, in the worst case, has to search all positions in the map, a number which is usually is much higher than  (roughly ).


















Comparison to LfD.
The task we study is closely related to LfD.
However, note that usually in LfD, the target agent ("learner") has access to the demonstrator's actions, which is not necessary for our method.
Furthermore, in our method, in some sense, the target agent can be seen as translating  into its own "coordinate system" itself, while this mapping is usually hand-crafted in LfD.


Some insights during the development of the method.
An interesting insight during the development of Algorithm  was that while the low-pass filter only led to minor improvements, what really helped was to visit each position say three times and then optimize the distance over the averaged images.
Furthermore, it was was surprising how well the simple Euclidean distance we used worked.



Limitations.

Note that the method is limited to environments similar to landscapes where some stochasticity and variation may be contained, but not too much.
For instance, if the environment varies to strongly in the dependence on the time an agent spends in the environment, the proposed method most likely fails since the tracking of  usually takes longer than the original performance of it.

















Investigation 2: integrating sensory data, hardware specifications and causal relations




In this section we aim to shed light on the following aspects of the problem formulated in Section :

How can information on the the hardware specifications of various agents be used for knowledge transfer between them?
To what extent can causal models help, e.g., for integrating those hardware specifications (i.e., information on the "data producing mechanisms")?(Another reason why causal reasoning could help is that in the end we are interested in the causal effects of an agent on its environment, and not just correlational information.) 
How can information from the "subjective perspective" of an agent (i.e., on the relation between its sensory measurements and its actions) be merged with information from an "outside perspective" (i.e., that of an engineer which sees the hardware specifications of an agent).


The investigation is structured as follows: 
in Section  we describe the scenario, in particular the available heterogeneous information sources,
in Section  we outline an information-integrating agent for that scenario,
then, in Section , we give an intuitive toy example of scenario and method,
and last, in Section  we discuss advantages and limitations of our approach.

Keep in mind the definition of causal models in Section .
It needs to be mentioned that at certain points in this section we will allow ourselves some extent of imprecision (in particular in the treatment of the (causal) model  and how it is inferred), since  we aim at going beyond what current rigorous modeling languages allow.








Scenario


Task.

We consider a scenario where a collection  of autonomous agents, think of self-driving cars, operates in a shared environment.
(For simplicity we assume that the number of agents is small compared to the size of the environment, such that they do not affect each other.)
We assume that while some hardware components of the agents differ, others are invariant between them.
We assume that for each car a task (e.g., to track some trajectory) is given and fixed.




Available heterogeneous information.


Note that we could allow  to vary over time, e.g., to account for the fact that new cars get on the road every day, however, for the sake of a simple exposition, we leave it fixed here.
We assume the following information sources to be available at time :

specifications  of the hardware of each agent  
past experiences (i.e., actions and observations)  of all agents , consisting of observations  and control outputs , i.e., .
a description  (e.g., a physical or causal model or collection of such models) consisting of (1) a set of independence statements
(Clearly, independence assertions are central to integration of information: only based on statements of the form " is more or less independent of all factors that potentially will be included, except for this and this small set" it seems possible to rigorously (automatically) reason about integration.)
and (2) a set of dependence statements, possibly including specific information on the shape of the dependence, w.r.t. the factors contained in the specifications  and the experiences , for . 
Potentially, the various independence and dependence information pieces could come from different sources, say targeted experiments as well as general prior knowledge.
We assume the dependence structure (including the precise shapes of the dependences) to be time-invariant.

Relation to general problem.
This scenario captures certain aspects of  in that some higher-level information in the form of the description  is available.
While here, as a first step, we only consider mathematical models, in the future one could also imagine to include informal but well-structured models and descriptions (in simple natural language), possibly translating them into formal models as an intermediate step (using, e.g., machine learning).
Furthermore, the scenario captures important aspects of , since we consider the integration of information from certain source self-driving cars for the decision making of a given target car.




Sketch of a method








[tb]
   Integration and control algorithm for agent 
   [1]
   input: Time point , description , specifications , experiences .
   Initialize a causal model  by the causal diagram implied by the description  over the set of factors in  and .  
   Update the "belief" over the mechanisms in  using all values of variables contained in  and the experiences  (possibly based on additional priors).  

   From the updated , calculate , the implication of  for agent .    Find action  that is optimal w.r.t. the given task, under .    output: 



We sketch a method for the described scenario in Algorithm .
It first derives a "global" causal diagram - applying to all agents - from the potentially heterogeneous description  (line ).
Then (line ) the causal conditionals of , which are not determined by , are inferred from the given hardware specifications as well as the experiences gathered by all agents up to time .
Last, based on the hardware specifications of agent , the implications of  for agent  are calculated (line ) and the optimal action under these implications is performed (line ).


























A toy example

Let us illustrate how the method proposed in Section  works in a concrete toy scenario.
The core intuition is that while some details of the dynamics of self-driving cars may vary between different cars, they can still share information on say the road conditions (friction, drag, etc.) at certain positions , or the like.




[scale=0.6]

    
[obs] at (0, 0) (ddx) ;

[obs] at (-1, 2) (A_e)  edge[->] (ddx);
[obs] at (1, 2) (A_f)  edge[->] (ddx);

[obs] at (-1, 4) (u)  edge[->] (A_e);
[obs] at (1, 4) (x)  edge[->] (A_f);

[obs] at (-3, 2) (m)  edge[->] (A_e);





Sketch of the causal diagram . The power  influencing only  implies that knowledge on the mechanism  for  can be transferred between two cars even if they differ in .


Specific scenario.

We consider two simplified self-driving cars, i.e., , where we assume the observation  (or  if we refer to a model for both cars) to be the car's position.
We consider the following concrete instances of the information sources listed in Section .
(Note that, for the sake of simplicity, we assume all mechanisms to be deterministic, such that we can model them by functions  instead of conditional distributions , although the latter would be more general, see Section .)

The specification for car  is given by its power (e.g., measured in horse powers), i.e., . 
The experience of car  consist of all past position-action pairs of both cars, i.e., .
The description  consists of three elements:

an engineer contributes the equation  for the engine of the cars(In particular, the mechanism specification implies non-influence by all other relevant factors.), where  is the force produced by the engine (incl. gears), and  a known function,
a physicist contributes the equation  for the acceleration  of the cars, where  are other forces that affect the cars, such as friction and drag, and  is the known mass (which we assume to be the same for both cars),
another physicist produces a set of additional independence assertions, such that altogether the description  implies the causal diagram  depicted in Figure .(A better way to describe the physical forces causally might be to replace  in the equations and in  by expressions based on , , and , where  denotes the velocity.) 





















Implementation of our method.

We suggest the following concrete implementation of the crucial part of our method, i.e., line  and  in Algorithm , based on the concrete instances of information available in this toy scenario.
Keep in mind that , the function that maps a position  to the corresponding force  at that position and thus models the generating mechanism for , is the only unknown part of  after initializing it by . 




Line : Use the experience , to infer the function  on all positions  visited by either of the cars, based on the equation

*
m y - f_F(u,hp^k) = f_G(y)
for all , and the fact that the l.h.s. of this equation as well as  are known for all positions (and accelerations) visited by either of the cars.
Line : calculate "", i.e., the effect of control action  of agent  at position , for all positions that were visited before by either of the cars.











Discussion




The toy example in Section  shows how in principle the integration of heterogeneous information could help some "target" self-driving car for better decision making in situations not visited by it but by different "source" self-driving cars.
It is important to note that all listed information sources were necessary for this:
the hardware specifications are necessary to understand ,
the experience is necessary to infer ,
and the independence knowledge ( not affecting ) is necessary to transfer the knowledge about the force  on various positions  between the cars.
Note that the above scenario cannot be tackled by standard RL approaches since we transfer knowledge between agents of different hardware. 
Furthermore, methods like LfD or transfer learning (see Sections  and ) usually do not automatically harness information on hardware specifications of agents.

Based on our preliminary investigation above, it seems that causal models are helpful in that they provide a language in which one can express relevant assumptions and reason about them.
However, from a practical perspective, it is not clear if the necessary calculations could not be genuinely done e.g. in classical probabilistic models.

An important question is whether the method sketched in Section  can be generalized to dependence statements in more natural - but still well-structured - language than equations and causal diagrams.












































Outlook: future directions and open questions

Here we sketch a potential agenda for future investigations and pose interesting open questions.



Potential future directions






"Universal representation of physical world".

An interesting subject-matter of future research would be a "universal representation" of the physical world 
- a rich representation to which each information source could be translated, and from which each agent could derive the implications for its specific sensor and actuator configurations.
Such a representation would be more efficient than hand-crafting mappings for each (new) pair of source and agent individually (as is usually done in e.g. LfD, see Section ),
reducing the number of necessary mappings from  to , where  is the number of agents. 
One starting point would be representations that are already used to integrate laser or radar scanner data on the one hand with (stereo) video camera data on the other hand in self-driving cars.
Another starting point would be the global positioning system (GPS) which is a successful universal representation of position with clear, hardware-independent semantics.


Investigation and classification of the "integration mapping".


Another important concept for integration of heterogeneous information could be the mapping that transforms a collection of pieces of well-structured heterogeneous information into a model of the current situation or even directly into action recommendations.
The study of such a mapping could build on the investigation of related mappings in LfD and transfer learning for agents (see Sections  and ).
Furthermore, parts of such a mapping could be learned (which would be related to machine-learning-based multi-agent systems, see Section .
Generally, it would be interesting to examine the basic conditions under which the integration of heterogeneous information can be beneficial.
Note that one way to classify and order various sources of information (and the mappings that are necessary to integrate them) would be from "closest to the agent ", i.e., it's own past observations and actions to "most distant", e.g., agent-independent descriptions of the world in simple natural language, as exemplified in Section . 







Further experiments.


Further experiments, with a gradually increasing difficulty (e.g. along the ordering proposed in the previous paragraph), could be performed, e.g. using the platform Malmo (Section ) to gain a better understanding of integration of information:


Agents can observe other agents from a third-person perspective, enabling  in Section .
Higher level observations can be provided in the form of natural language (typed chat or external information in the form of natural language), or through artifacts such as maps, sign-posts, symbolic clues, etc. 
































Open questions

It would also be interesting to investigate how the following questions could be answered:

One of the main question which guided our investigation in Section  can be cast as follows. While the information relevant to an agent is usually in the form of effects of its actions in certain situations, a lot of knowledge is formulated in non-causal form: for instance street maps at various granularities for self-driving cars. How are these two forms of information related? Is there a standard way to translate between them?
Stated differently, how can various forms of information be translated into a model of the dynamics of the agent in the world.

Where is the boundary between additional heterogeneous information and prior knowledge?
How can the need for information integration be balanced with privacy restrictions? For instance, one may imagine cases where the mapping from a source agent's experience to a target agent's action is rather simple in principle, but information collected by the source agent cannot or should not be transmitted to the other, at least not in full.
How can big databases of information be filtered for useful information, i.e., the information which is correct and relevant for the current environment and task?
To what extent is the problem of information transfer between two different agents in the "same" environment just a special case of transfer between different environments (by considering the hardware of an agent as part of the environment)?
How can we reason without having a "global" model such as Figure ? What about interfaces to build global from "local" models, describing only say the engine?

Generally, what are potential theoretical limitations of automated information integration, e.g. in terms of computability?


























































































Conclusions


In this paper, we considered the problem of designing agents that autonomously integrate available heterogeneous information about their environment.
We investigated how experimentation in simulated environments on the one hand, and causal models on the other, can help to address it.
A next step would be to perform more sophisticated experiments, ideally guided by specific problems e.g. from the area of self-driving cars.


Acknowledgments

The authors thank Mathew Monfort, Nicole Beckage, Roberto Calandra, Matthew Johnson, Tim Hutton, David Bignell, Daniel Tarlow, Chris Bishop and Andrew Blake for helpful discussions, and the anonymous reviewers for useful hints.






